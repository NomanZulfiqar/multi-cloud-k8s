name: EKS Simple Destroy

on:
  workflow_dispatch: # Manual trigger
  push:
    branches: [ secret-sync ]
    paths:
      - '.github/workflows/eks-destroy-simple.yml'

env:
  AWS_REGION: us-east-1

jobs:
  destroy-all:
    name: Destroy EKS Resources
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl and Helm
        run: |
          # Install kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Destroy Applications
        run: |
          echo "=== DESTROYING APPLICATIONS ==="
          
          # Get EKS credentials
          aws eks update-kubeconfig --name my-eks-cluster --region us-east-1 || echo "EKS cluster not found"
          
          # Uninstall Helm releases
          helm uninstall myapp --wait || echo "myapp not found"
          helm uninstall postgres --wait || echo "postgres not found"
          helm uninstall csi-secrets-store -n kube-system --wait || echo "CSI driver not found"
          
          # Delete Kubernetes resources
          kubectl delete secret db-credentials aws-ecr-secret --ignore-not-found=true
          kubectl delete serviceaccount myapp-sa --ignore-not-found=true
          kubectl delete secretproviderclass --all --ignore-not-found=true
          
          echo "‚úÖ Applications destroyed"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Destroy Infrastructure
        run: |
          echo "=== DESTROYING INFRASTRUCTURE ==="
          
          cd eks/terraform
          terraform init -upgrade
          
          # Clean up ECR images first
          echo "Cleaning up ECR repository..."
          aws ecr list-images --repository-name myapp --query 'imageIds[*]' --output json > /tmp/images.json
          if [ -s /tmp/images.json ] && [ "$(cat /tmp/images.json)" != "[]" ]; then
            echo "Deleting ECR images..."
            aws ecr batch-delete-image --repository-name myapp --image-ids file:///tmp/images.json || echo "Failed to delete some images"
          else
            echo "No ECR images to delete"
          fi
          
          # Manual cleanup of Load Balancers
          echo "Cleaning up Load Balancers..."
          aws elbv2 describe-load-balancers --query 'LoadBalancers[?contains(Tags[?Key==`kubernetes.io/cluster/my-eks-cluster`].Value, `owned`)].LoadBalancerArn' --output text | while read lb_arn; do
            if [ -n "$lb_arn" ]; then
              echo "Deleting Load Balancer: $lb_arn"
              aws elbv2 delete-load-balancer --load-balancer-arn $lb_arn || echo "Failed to delete LB"
            fi
          done
          
          # Clean up Security Groups
          echo "Cleaning up Security Groups..."
          aws ec2 describe-security-groups --filters "Name=tag:kubernetes.io/cluster/my-eks-cluster,Values=owned" --query 'SecurityGroups[].GroupId' --output text | while read sg_id; do
            if [ -n "$sg_id" ]; then
              echo "Deleting Security Group: $sg_id"
              aws ec2 delete-security-group --group-id $sg_id || echo "Failed to delete SG"
            fi
          done
          
          sleep 120
          
          # Terraform destroy
          terraform destroy -auto-approve || echo "Some resources may still exist"
          
          echo "‚úÖ Infrastructure destroy completed"

      - name: Final Cleanup
        run: |
          echo "üéâ EKS DESTRUCTION COMPLETED"
          echo "‚úÖ Applications and infrastructure destroyed"
          echo "‚ö†Ô∏è  Check AWS console for any remaining resources"