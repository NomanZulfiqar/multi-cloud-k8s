name: EKS Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ secret-sync ]
    paths:
      - 'eks/app/**'
      - 'eks/helm-charts/**'

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: my-eks-cluster

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPOSITORY_URL="${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp"
          
          docker build -t $ECR_REPOSITORY_URL:latest ./eks/app
          docker push $ECR_REPOSITORY_URL:latest

  deploy-kubernetes:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Install AWS Secrets Store CSI Driver
        run: |
          echo "=== INSTALLING CSI DRIVER ==="
          
          # Clean up any existing conflicting resources
          echo "Cleaning up existing CSI driver resources..."
          
          # Remove existing Helm releases that might conflict
          helm uninstall myapp --namespace default || echo "No myapp release to remove"
          helm uninstall csi-secrets-store --namespace kube-system || echo "No csi-secrets-store release to remove"
          
          # Remove conflicting cluster resources
          kubectl delete clusterrole secretproviderrotation-role --ignore-not-found=true
          kubectl delete clusterrolebinding secretproviderrotation-rolebinding --ignore-not-found=true
          kubectl delete crd secretproviderclasses.secrets-store.csi.x-k8s.io --ignore-not-found=true
          kubectl delete crd secretproviderclasspodstatuses.secrets-store.csi.x-k8s.io --ignore-not-found=true
          
          # Remove CSI driver pods
          kubectl delete daemonset secrets-store-csi-driver -n kube-system --ignore-not-found=true
          kubectl delete daemonset csi-secrets-store-provider-aws -n kube-system --ignore-not-found=true
          
          echo "Waiting for cleanup to complete..."
          sleep 30
          
          # Fresh installation
          echo "Installing CSI driver fresh..."
          helm repo add secrets-store-csi-driver https://kubernetes-sigs.github.io/secrets-store-csi-driver/charts
          helm repo update
          
          helm install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver \
            --namespace kube-system \
            --set syncSecret.enabled=true \
            --set enableSecretRotation=true \
            --wait --timeout=10m
          
          # Install AWS provider
          kubectl apply -f https://raw.githubusercontent.com/aws/secrets-store-csi-driver-provider-aws/main/deployment/aws-provider-installer.yaml
          
          # Wait for pods to be ready
          echo "Waiting for CSI driver pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=secrets-store-csi-driver -n kube-system --timeout=300s
          kubectl wait --for=condition=ready pod -l app=csi-secrets-store-provider-aws -n kube-system --timeout=300s
          
          echo "✅ CSI driver installed successfully"

      - name: Setup Cluster Access
        run: |
          # Create ECR pull secret
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region us-east-1) \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Application
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPOSITORY_URL="${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp"
          
          echo "=== DEPLOYING APPLICATION ==="
          
          # Deploy without problematic dependencies
          helm upgrade --install myapp ./eks/helm-charts/application \
            --values ./eks/helm-charts/application/values.yaml \
            --set image.repository=$ECR_REPOSITORY_URL \
            --set image.tag=latest \
            --set aws.accountId=$ACCOUNT_ID \
            --set secretStore.enabled=false \
            --set postgresql.enabled=false \
            --wait --timeout=10m \
            --debug
          
          echo "✅ Application deployed successfully"