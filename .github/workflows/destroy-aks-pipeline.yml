name: AKS Destruction Pipeline

on:
  workflow_dispatch:  # Manual trigger only

env:
  AZURE_REGION: eastus

jobs:
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./aks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (for S3 backend)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'
          
      - name: Clean up Kubernetes resources
        run: |
          # Get AKS credentials (may fail if cluster doesn't exist)
          if az aks get-credentials --resource-group aks-rg --name my-aks-cluster 2>/dev/null; then
            echo "Cluster accessible, cleaning up resources..."
            
            # Delete Helm releases with timeout
            echo "Deleting Helm releases..."
            timeout 60s helm ls -A -q | xargs -r helm uninstall || echo "No Helm releases to delete"
            
            # Delete external-secrets namespace with timeout
            echo "Deleting external-secrets namespace..."
            kubectl delete namespace external-secrets --ignore-not-found=true --timeout=60s || echo "Namespace deletion timed out, continuing"
            
            # Delete application resources with timeout
            echo "Deleting application resources..."
            timeout 60s kubectl delete all --all -n default || echo "Resource deletion timed out or no resources to delete"
            
            echo "Kubernetes cleanup completed"
          else
            echo "Cluster not accessible or doesn't exist, skipping Kubernetes cleanup"
          fi

      - name: Clean up ACR images
        run: |
          echo "Cleaning up ACR images..."
          if az acr show --name myappacr2024 &>/dev/null; then
            echo "ACR exists, cleaning up repositories..."
            az acr repository delete --name myappacr2024 --repository myapp --yes || echo "Repository may not exist"
          else
            echo "ACR doesn't exist, skipping image cleanup"
          fi

      - name: Remove missing resources from state
        run: |
          echo "Checking and removing missing resources from state..."
          
          # Check and remove PostgreSQL resources if they don't exist
          if ! az postgres flexible-server show --name myapp-postgres-flex --resource-group aks-rg &>/dev/null; then
            echo "PostgreSQL server not found, removing from state"
            terraform state rm azurerm_postgresql_flexible_server.postgres || echo "Not in state"
            terraform state rm azurerm_postgresql_flexible_server_database.app_db || echo "Not in state"
            terraform state rm azurerm_postgresql_flexible_server_firewall_rule.allow_all || echo "Not in state"
          fi
          
          # Check and remove Redis if it doesn't exist
          if ! az redis show --name myapp-redis-2024 --resource-group aks-rg &>/dev/null; then
            echo "Redis cache not found, removing from state"
            terraform state rm azurerm_redis_cache.redis || echo "Not in state"
          fi
          
          # Check and remove Key Vault secrets if vault doesn't exist
          if ! az keyvault show --name myapp-kv-2024 &>/dev/null; then
            echo "Key Vault not found, removing secrets from state"
            terraform state rm azurerm_key_vault_secret.db_username || echo "Not in state"
            terraform state rm azurerm_key_vault_secret.db_password || echo "Not in state"
            terraform state rm azurerm_key_vault.kv || echo "Not in state"
          fi
          
          # Check and remove ACR if it doesn't exist
          if ! az acr show --name myappacr2024 &>/dev/null; then
            echo "ACR not found, removing from state"
            terraform state rm azurerm_container_registry.acr || echo "Not in state"
          fi
          
          # Check and remove AKS cluster if it doesn't exist
          if ! az aks show --name my-aks-cluster --resource-group aks-rg &>/dev/null; then
            echo "AKS cluster not found, removing from state"
            terraform state rm azurerm_kubernetes_cluster.aks || echo "Not in state"
          fi

      - name: Manual Key Vault cleanup
        run: |
          echo "Manually cleaning up Key Vault secrets..."
          # Delete secrets without purging to avoid permission issues
          az keyvault secret delete --vault-name myapp-kv-2024 --name db-username || echo "Secret may not exist"
          az keyvault secret delete --vault-name myapp-kv-2024 --name db-password || echo "Secret may not exist"
          
          # Wait a bit for deletion to process
          sleep 10
          
          echo "Key Vault secrets cleanup completed"

      - name: Terraform Destroy
        run: |
          echo "Starting Terraform destroy..."
          
          # Try to force unlock if locked
          echo "Checking for state lock..."
          if ! terraform destroy -auto-approve 2>&1 | tee destroy_output.log; then
            if grep -q "state lock" destroy_output.log; then
              echo "State is locked, attempting to force unlock..."
              LOCK_ID=$(grep "ID:" destroy_output.log | awk '{print $2}' | head -1)
              if [ -n "$LOCK_ID" ]; then
                echo "Forcing unlock with ID: $LOCK_ID"
                terraform force-unlock -force "$LOCK_ID" || echo "Force unlock failed"
                echo "Retrying destroy after unlock..."
                terraform destroy -auto-approve || echo "Destroy failed after unlock"
              else
                echo "Could not extract lock ID, trying with -lock=false"
                terraform destroy -auto-approve -lock=false || echo "Destroy with -lock=false failed"
              fi
            else
              echo "Non-lock related error occurred"
            fi
          else
            echo "âœ… Terraform destroy completed successfully"
          fi
          
          echo "ðŸŽ‰ AKS infrastructure destruction process completed"