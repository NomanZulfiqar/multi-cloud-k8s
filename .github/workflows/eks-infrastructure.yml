name: EKS Infrastructure Pipeline

on:
  workflow_dispatch: # Manual trigger only

env:
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade
        
      - name: Make import script executable
        run: chmod +x import-resources.sh

      - name: Import existing resources
        run: ./import-resources.sh

      - name: Terraform Format
        run: terraform fmt -write=true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-eks-infra
          path: ./eks/terraform/tfplan
          retention-days: 1

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan-eks-infra
          path: ./eks/terraform

      - name: VPC mismatch cleanup
        run: |
          echo "Checking for VPC mismatch and cleaning up if needed..."
          
          EXPECTED_VPC=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=eks-vpc" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "None")
          
          if [[ "$EXPECTED_VPC" == "None" ]]; then
            echo "No existing VPC found, skipping cleanup"
            exit 0
          fi
          
          echo "Expected VPC: $EXPECTED_VPC"
          
          if aws elasticache describe-cache-subnet-groups --cache-subnet-group-name cache-subnet-group &>/dev/null; then
            CACHE_VPC=$(aws elasticache describe-cache-subnet-groups --cache-subnet-group-name cache-subnet-group --query 'CacheSubnetGroups[0].VpcId' --output text)
            if [[ "$CACHE_VPC" != "$EXPECTED_VPC" ]]; then
              echo "ElastiCache subnet group in wrong VPC ($CACHE_VPC) but may be in use, skipping deletion"
            else
              echo "ElastiCache subnet group in correct VPC"
            fi
          fi
          
          if aws rds describe-db-subnet-groups --db-subnet-group-name postgres-subnet-group &>/dev/null; then
            RDS_VPC=$(aws rds describe-db-subnet-groups --db-subnet-group-name postgres-subnet-group --query 'DBSubnetGroups[0].VpcId' --output text)
            if [[ "$RDS_VPC" != "$EXPECTED_VPC" ]]; then
              echo "RDS subnet group in wrong VPC ($RDS_VPC) but may be in use, skipping deletion"
            else
              echo "RDS subnet group in correct VPC"
            fi
          fi
          
          sleep 30

      - name: Import existing resources
        run: |
          echo "Importing existing resources..."
          
          if aws elasticache describe-cache-clusters --cache-cluster-id eks-redis &>/dev/null; then
            echo "ElastiCache cluster exists, importing..."
            terraform import aws_elasticache_cluster.redis eks-redis || echo "Already in state"
          fi
          
          if aws rds describe-db-instances --db-instance-identifier eks-postgres &>/dev/null; then
            echo "RDS instance exists, importing..."
            terraform import aws_db_instance.postgres eks-postgres || echo "Already in state"
          fi
          
          if aws eks describe-cluster --name my-eks-cluster &>/dev/null; then
            echo "EKS cluster exists, importing..."
            terraform import module.eks.aws_eks_cluster.this[0] my-eks-cluster || echo "Already in state"
          fi
      
      - name: Terraform Apply
        run: |
          echo "Applying Terraform configuration..."
          if ! terraform apply -auto-approve tfplan 2>&1 | tee apply_output.log; then
            if grep -q "CacheSubnetGroupNotFoundFault\|DBSubnetGroupNotFoundFault\|subnet group.*does not exist\|not found\|InvalidParameterCombination.*Subnet group.*belongs to a different VPC\|InvalidVPCNetworkStateFault" apply_output.log; then
              echo "❌ VPC/SUBNET GROUP ERROR - PIPELINE FAILED"
              echo "Infrastructure error - subnet groups missing or in wrong VPC"
              cat apply_output.log
              exit 1
            elif grep -q "already exists\|already in state\|no changes" apply_output.log; then
              echo "✅ Resources already exist, continuing"
            elif grep -q "state lock\|ConditionalCheckFailedException" apply_output.log; then
              echo "❌ State lock error - this is an authentic error"
              cat apply_output.log
              exit 1
            elif grep -q "permission\|forbidden\|unauthorized" apply_output.log; then
              echo "❌ Permission error - this is an authentic error"
              cat apply_output.log
              exit 1
            else
              echo "⚠️ Apply failed, trying without plan..."
              if ! terraform apply -auto-approve 2>&1 | tee apply_retry.log; then
                if grep -q "state lock\|permission\|forbidden" apply_retry.log; then
                  echo "❌ Authentic error on retry"
                  cat apply_retry.log
                  exit 1
                else
                  echo "✅ Apply completed with warnings"
                fi
              fi
            fi
          else
            echo "✅ Terraform apply completed successfully"
          fi

      - name: Save Infrastructure Outputs
        id: terraform_output
        run: |
          echo "CLUSTER_NAME=my-eks-cluster" >> $GITHUB_OUTPUT
          echo "REGION=us-east-1" >> $GITHUB_OUTPUT
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_URL=${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp" >> $GITHUB_OUTPUT
          echo "EXTERNAL_SECRETS_ROLE_ARN=arn:aws:iam::${ACCOUNT_ID}:role/external-secrets-role" >> $GITHUB_OUTPUT

      - name: Verify Infrastructure
        run: |
          echo "=== INFRASTRUCTURE VERIFICATION ==="
          
          # Verify EKS cluster
          aws eks describe-cluster --name my-eks-cluster --query 'cluster.status' --output text
          
          # Verify RDS instance
          aws rds describe-db-instances --db-instance-identifier eks-postgres --query 'DBInstances[0].DBInstanceStatus' --output text
          
          # Verify ElastiCache
          aws elasticache describe-cache-clusters --cache-cluster-id eks-redis --query 'CacheClusters[0].CacheClusterStatus' --output text
          
          # Verify ECR repository
          aws ecr describe-repositories --repository-names myapp --query 'repositories[0].repositoryName' --output text
          
          # Verify Secrets Manager
          aws secretsmanager describe-secret --secret-id myapp/db-credentials --query 'Name' --output text
          
          echo "✅ Infrastructure verification completed"