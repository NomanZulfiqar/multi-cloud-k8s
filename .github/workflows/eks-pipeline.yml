name: EKS Deployment Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'eks/**'
      - '.github/workflows/eks-pipeline.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'eks/**'
      - '.github/workflows/eks-pipeline.yml'
  workflow_dispatch: # Allows manual triggering

env:
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade
        
      - name: Make import script executable
        run: chmod +x import-resources.sh

      - name: Import existing resources
        run: ./import-resources.sh

      - name: Terraform Format
        run: terraform fmt -write=true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          # Skip plan creation if import script already created it
          if [ ! -f "tfplan" ]; then
            terraform plan -out=tfplan
          fi
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./eks/terraform/tfplan
          retention-days: 1

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./eks/terraform

      - name: Manual Import of Critical Resources
        run: |
          # Check if ElastiCache subnet group is in state before importing
          if ! terraform state list | grep -q "aws_elasticache_subnet_group.cache_subnet_group"; then
            echo "Importing ElastiCache subnet group..."
            terraform import aws_elasticache_subnet_group.cache_subnet_group cache-subnet-group || echo "Import failed, continuing"
          else
            echo "ElastiCache subnet group already in state, skipping import"
          fi
          
          # Check if RDS DB subnet group is in state before importing
          if ! terraform state list | grep -q "aws_db_subnet_group.postgres"; then
            echo "Importing RDS DB subnet group..."
            terraform import aws_db_subnet_group.postgres postgres-subnet-group || echo "Import failed, continuing"
          else
            echo "RDS DB subnet group already in state, skipping import"
          fi
          
          # Check if EKS cluster is in state before importing
          if ! terraform state list | grep -q "module.eks.aws_eks_cluster.this"; then
            echo "Importing EKS cluster..."
            terraform import module.eks.aws_eks_cluster.this[0] my-eks-cluster || echo "Import failed, continuing"
          else
            echo "EKS cluster already in state, skipping import"
          fi
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan || terraform apply -auto-approve

      - name: Save Terraform Outputs
        id: terraform_output
        run: |
          echo "CLUSTER_NAME=my-eks-cluster" >> $GITHUB_OUTPUT
          echo "REGION=us-east-1" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        working-directory: ./eks/terraform
        run: terraform init -upgrade

      - name: Get ECR Repository URL
        id: ecr-url
        working-directory: ./eks/terraform
        run: |
          # Use a hardcoded ECR URL format instead of trying to parse the output
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPOSITORY_URL="${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp"
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./eks/app
          push: true
          tags: ${{ steps.ecr-url.outputs.ECR_REPOSITORY_URL }}:latest

  deploy-kubernetes:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        working-directory: ./eks/terraform
        run: terraform init -upgrade

      - name: Get Outputs
        id: terraform-outputs
        working-directory: ./eks/terraform
        run: |
          CLUSTER_NAME="my-eks-cluster"
          # Use a hardcoded ECR URL format
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URL="${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp"
          # Use a hardcoded role ARN format
          ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/aws-load-balancer-controller"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_URL=$ECR_URL" >> $GITHUB_OUTPUT
          echo "EXTERNAL_SECRETS_ROLE_ARN=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-eks-cluster --region ${{ env.AWS_REGION }}

      - name: Create ECR Pull Secret
        run: |
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${{ steps.terraform-outputs.outputs.ECR_REPOSITORY_URL }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password) \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Helm
      - name: Create Database Credentials Secret
        run: |
          # Create a direct Kubernetes secret for database credentials
          echo "Creating database credentials secret..."
          kubectl create secret generic db-credentials \
            --from-literal=username=app_user \
            --from-literal=password=app_password \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Verify the secret was created
          echo "Verifying secret was created..."
          kubectl get secret db-credentials        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Create AWS Secrets Manager Secret
        run: |
          # Create the actual secret in AWS Secrets Manager
          echo "Creating secret in AWS Secrets Manager..."
          aws secretsmanager create-secret \
            --name myapp/db-credentials \
            --secret-string '{"username":"app_user","password":"app_password"}' \
            --region us-east-1 || echo "Secret may already exist, continuing"
      
      - name: Install External Secrets Operator
        run: |
          # Create namespace
          kubectl create namespace external-secrets --dry-run=client -o yaml | kubectl apply -f -
          
          # Create service account for External Secrets
          kubectl apply -f ./eks/kubernetes/external-secrets/namespace.yaml
          kubectl apply -f ./eks/kubernetes/external-secrets/service-account.yaml
          
          # Annotate service account with IAM role
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/external-secrets-operator"
          kubectl annotate serviceaccount -n external-secrets external-secrets-sa \
            eks.amazonaws.com/role-arn=${ROLE_ARN} --overwrite
          
          # Install External Secrets CRDs directly
          echo "Installing External Secrets CRDs directly..."
          kubectl apply -f https://raw.githubusercontent.com/external-secrets/external-secrets/main/config/crds/bases/external-secrets.io_clustersecretstores.yaml
          kubectl apply -f https://raw.githubusercontent.com/external-secrets/external-secrets/main/config/crds/bases/external-secrets.io_externalsecrets.yaml
          kubectl apply -f https://raw.githubusercontent.com/external-secrets/external-secrets/main/config/crds/bases/external-secrets.io_secretstores.yaml
          
          # Wait for CRDs to be established
          echo "Waiting for CRDs to be established..."
          kubectl wait --for condition=established --timeout=60s crd/secretstores.external-secrets.io
          kubectl wait --for condition=established --timeout=60s crd/externalsecrets.external-secrets.io
          kubectl wait --for condition=established --timeout=60s crd/clustersecretstores.external-secrets.io
          
          echo "Sleeping for 30 seconds to ensure CRDs are fully ready..."
          sleep 30
          
          # Install External Secrets Operator with increased timeout
      

      - name: Deploy Database
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install postgres bitnami/postgresql -f ./eks/helm-charts/database/postgres-values.yaml

      - name: Prepare Application Values
        run: |
          # Replace ECR repository URL in values.yaml
          sed -i "s|\${ECR_REPOSITORY_URL}|${{ steps.terraform-outputs.outputs.ECR_REPOSITORY_URL }}|g" ./eks/helm-charts/application/values.yaml

      - name: Deploy Application
        run: |
          helm upgrade --install myapp ./eks/helm-charts/application