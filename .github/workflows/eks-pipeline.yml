name: EKS Deployment Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'eks/**'
      - '.github/workflows/eks-pipeline.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'eks/**'
      - '.github/workflows/eks-pipeline.yml'
  workflow_dispatch: # Allows manual triggering

env:
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade
        
      - name: Make import script executable
        run: chmod +x import-resources.sh

      - name: Import existing resources
        run: ./import-resources.sh

      - name: Terraform Format
        run: terraform fmt -write=true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./eks/terraform/tfplan
          retention-days: 1

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./eks/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Save Terraform Outputs
        id: terraform_output
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "REGION=$(terraform output -raw region)" >> $GITHUB_OUTPUT

  deploy-kubernetes:
    name: Deploy to Kubernetes
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        working-directory: ./eks/terraform
        run: terraform init -upgrade

      - name: Get Cluster Info
        working-directory: ./eks/terraform
        run: |
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          echo "Using cluster: $CLUSTER_NAME in region $AWS_REGION"

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name my-eks-cluster --region ${{ env.AWS_REGION }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Deploy Database
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install postgres bitnami/postgresql -f ./eks/helm-charts/database/postgres-values.yaml

      - name: Deploy Application
        run: |
          helm upgrade --install myapp ./eks/helm-charts/application