name: EKS Deployment Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'eks/**'
      - '.github/workflows/eks-pipeline.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'eks/**'
      - '.github/workflows/eks-pipeline.yml'
  workflow_dispatch: # Allows manual triggering

env:
  AWS_REGION: us-east-1

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade
        
      - name: Make import script executable
        run: chmod +x import-resources.sh

      - name: Import existing resources
        run: ./import-resources.sh

      - name: Terraform Format
        run: terraform fmt -write=true

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          # Skip plan creation if import script already created it
          if [ ! -f "tfplan" ]; then
            terraform plan -out=tfplan
          fi
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ./eks/terraform/tfplan
          retention-days: 1

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ./eks/terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init -upgrade

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: ./eks/terraform

      - name: Clean up old subnet groups from different VPCs
        run: |
          echo "Cleaning up old subnet groups from different VPCs..."
          
          # Delete ElastiCache subnet group if it exists
          aws elasticache delete-cache-subnet-group --cache-subnet-group-name cache-subnet-group || echo "ElastiCache subnet group may not exist"
          
          # Delete RDS subnet group if it exists
          aws rds delete-db-subnet-group --db-subnet-group-name postgres-subnet-group || echo "RDS subnet group may not exist"
          
          # Wait for deletion
          sleep 30
          
          echo "Old subnet groups cleaned up"

      - name: Import existing resources
        run: |
          echo "Importing existing resources..."
          
          # Import ElastiCache cluster if it exists
          if aws elasticache describe-cache-clusters --cache-cluster-id eks-redis &>/dev/null; then
            echo "ElastiCache cluster exists, importing..."
            terraform import aws_elasticache_cluster.redis eks-redis || echo "Already in state"
          fi
          
          # Import RDS instance if it exists
          if aws rds describe-db-instances --db-instance-identifier eks-postgres &>/dev/null; then
            echo "RDS instance exists, importing..."
            terraform import aws_db_instance.postgres eks-postgres || echo "Already in state"
          fi
          
          # Import EKS cluster if it exists
          if aws eks describe-cluster --name my-eks-cluster &>/dev/null; then
            echo "EKS cluster exists, importing..."
            terraform import module.eks.aws_eks_cluster.this[0] my-eks-cluster || echo "Already in state"
          fi
      
      - name: Terraform Apply
        run: |
          echo "Applying Terraform configuration..."
          if ! terraform apply -auto-approve tfplan 2>&1 | tee apply_output.log; then
            if grep -q "already exists\|already in state\|no changes" apply_output.log; then
              echo "✅ Resources already exist, continuing"
            elif grep -q "state lock\|ConditionalCheckFailedException" apply_output.log; then
              echo "❌ State lock error - this is an authentic error"
              cat apply_output.log
              exit 1
            elif grep -q "permission\|forbidden\|unauthorized" apply_output.log; then
              echo "❌ Permission error - this is an authentic error"
              cat apply_output.log
              exit 1
            elif grep -q "connection refused\|dial tcp.*connect\|localhost.*connection" apply_output.log; then
              echo "❌ Kubernetes connection error - this is an authentic error"
              cat apply_output.log
              exit 1
            elif grep -q "already exists\|AlreadyExists" apply_output.log && grep -q "configmaps\|secrets\|serviceaccounts" apply_output.log; then
              echo "✅ Kubernetes resources already exist, continuing"
            elif grep -q "server has asked for the client to provide credentials\|Unauthorized\|authentication required" apply_output.log; then
              echo "❌ Kubernetes authentication error - this is an authentic error"
              cat apply_output.log
              exit 1
            elif grep -q "CacheSubnetGroupNotFoundFault\|DBSubnetGroupNotFoundFault\|subnet group.*does not exist\|not found\|InvalidParameterException.*subnets belong to the AZs" apply_output.log; then
              echo "❌ Database/VPC subnet error - FAILING PIPELINE"
              cat apply_output.log
              exit 1
            else
              echo "⚠️ Apply failed, trying without plan..."
              if ! terraform apply -auto-approve 2>&1 | tee apply_retry.log; then
                if grep -q "state lock\|permission\|forbidden" apply_retry.log; then
                  echo "❌ Authentic error on retry"
                  cat apply_retry.log
                  exit 1
                else
                  echo "✅ Apply completed with warnings"
                fi
              fi
            fi
          else
            echo "✅ Terraform apply completed successfully"
          fi

      - name: Save Terraform Outputs
        id: terraform_output
        run: |
          echo "CLUSTER_NAME=my-eks-cluster" >> $GITHUB_OUTPUT
          echo "REGION=us-east-1" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Image
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        working-directory: ./eks/terraform
        run: terraform init -upgrade

      - name: Get ECR Repository URL
        id: ecr-url
        working-directory: ./eks/terraform
        run: |
          # Use a hardcoded ECR URL format instead of trying to parse the output
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REPOSITORY_URL="${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp"
          echo "ECR_REPOSITORY_URL=$ECR_REPOSITORY_URL" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./eks/app
          push: true
          tags: ${{ steps.ecr-url.outputs.ECR_REPOSITORY_URL }}:latest

  deploy-kubernetes:
    name: Deploy to Kubernetes
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        working-directory: ./eks/terraform
        run: terraform init -upgrade

      - name: Get Outputs
        id: terraform-outputs
        working-directory: ./eks/terraform
        run: |
          CLUSTER_NAME="my-eks-cluster"
          # Use a hardcoded ECR URL format
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_URL="${ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/myapp"
          # Use a hardcoded role ARN format for External Secrets
          ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/external-secrets-role"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY_URL=$ECR_URL" >> $GITHUB_OUTPUT
          echo "EXTERNAL_SECRETS_ROLE_ARN=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Wait for cluster and create aws-auth ConfigMap
        run: |
          # Wait for cluster to be fully ready
          echo "Waiting for EKS cluster to be fully ready..."
          aws eks wait cluster-active --name my-eks-cluster --region us-east-1
          
          # Wait additional time for cluster endpoint to be accessible
          sleep 60
          
          # Install eksctl
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          
          # Get account ID and node group role
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          NODE_GROUP_NAME=$(aws eks list-nodegroups --cluster-name my-eks-cluster --region us-east-1 --query 'nodegroups[0]' --output text)
          NODE_ROLE_ARN=$(aws eks describe-nodegroup --cluster-name my-eks-cluster --nodegroup-name $NODE_GROUP_NAME --region us-east-1 --query 'nodegroup.nodeRole' --output text)
          
          # Create aws-auth ConfigMap manually using kubectl with admin token
          echo "Creating aws-auth ConfigMap manually..."
          TOKEN=$(aws eks get-token --cluster-name my-eks-cluster --region us-east-1 --query 'status.token' --output text)
          ENDPOINT=$(aws eks describe-cluster --name my-eks-cluster --region us-east-1 --query 'cluster.endpoint' --output text)
          
          # Create aws-auth ConfigMap
          cat > aws-auth.yaml <<EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: aws-auth
            namespace: kube-system
          data:
            mapRoles: |
              - rolearn: $NODE_ROLE_ARN
                username: system:node:{{EC2PrivateDNSName}}
                groups:
                  - system:bootstrappers
                  - system:nodes
            mapUsers: |
              - userarn: arn:aws:iam::$ACCOUNT_ID:root
                username: root
                groups:
                  - system:masters
          EOF
          
          # Apply using kubectl with token auth
          kubectl apply -f aws-auth.yaml --server=$ENDPOINT --token=$TOKEN --insecure-skip-tls-verify
          
          # Update kubeconfig and test
          aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
          kubectl get nodes
          kubectl get pods -A

      - name: Create ECR Pull Secret
        run: |
          kubectl create secret docker-registry aws-ecr-secret \
            --docker-server=${{ steps.terraform-outputs.outputs.ECR_REPOSITORY_URL }} \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password) \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Install External Secrets Operator
        run: |
          echo "Installing External Secrets Operator..."
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          
          # Install External Secrets Operator
          helm upgrade --install external-secrets external-secrets/external-secrets \
            --namespace external-secrets \
            --create-namespace \
            --wait
          
          # Wait for operator to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=external-secrets -n external-secrets --timeout=300s

      - name: Configure External Secrets for AWS Secrets Manager
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/external-secrets-role"
          
          echo "Creating External Secrets configuration..."
          
          # Create service account with IAM role annotation in default namespace
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: external-secrets-sa
            namespace: default
            annotations:
              eks.amazonaws.com/role-arn: $ROLE_ARN
          EOF
          
          # Create SecretStore for AWS Secrets Manager
          kubectl apply -f - <<EOF
          apiVersion: external-secrets.io/v1beta1
          kind: SecretStore
          metadata:
            name: aws-secrets-manager
            namespace: default
          spec:
            provider:
              aws:
                service: SecretsManager
                region: us-east-1
                auth:
                  jwt:
                    serviceAccountRef:
                      name: external-secrets-sa
          EOF
          
          # Create ExternalSecret to sync from AWS Secrets Manager
          kubectl apply -f - <<EOF
          apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: db-credentials-sync
            namespace: default
          spec:
            refreshInterval: 1m
            secretStoreRef:
              name: aws-secrets-manager
              kind: SecretStore
            target:
              name: db-credentials
              creationPolicy: Owner
            data:
            - secretKey: username
              remoteRef:
                key: myapp/db-credentials
                property: username
            - secretKey: password
              remoteRef:
                key: myapp/db-credentials
                property: password
          EOF
          
          # Wait for secret to be synced
          echo "Waiting for secret sync from AWS Secrets Manager..."
          kubectl wait --for=condition=Ready externalsecret/db-credentials-sync --timeout=300s
          
          # Verify the secret was created
          echo "Verifying secret was synced from AWS Secrets Manager..."
          kubectl get secret db-credentials
          kubectl describe externalsecret db-credentials-sync

      - name: Deploy Database
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm upgrade --install postgres bitnami/postgresql -f ./eks/helm-charts/database/postgres-values.yaml

      - name: Prepare Application Values
        run: |
          # Replace ECR repository URL in values.yaml
          sed -i "s|\${ECR_REPOSITORY_URL}|${{ steps.terraform-outputs.outputs.ECR_REPOSITORY_URL }}|g" ./eks/helm-charts/application/values.yaml

      - name: Deploy Application
        run: |
          helm upgrade --install myapp ./eks/helm-charts/application